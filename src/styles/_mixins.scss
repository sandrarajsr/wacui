@function size($target, $context: $base-size) {
    @return calc(($target / $context) * 1rem);
  }
  
// Media Queries
@mixin min($breakpoint, $property: width) {
  @media screen and (min-#{$property}: #{$breakpoint}px) {
    @content;
  }
}
@mixin max($breakpoint, $property: width) {
  @media screen and (max-#{$property}: #{$breakpoint - 0.01}px) {
    @content;
  }
}
@mixin min-max($bp-min, $bp-max, $prop-min: width, $prop-max: $prop-min) {
  @media screen and (min-#{$prop-min}: #{$bp-min}px) and (max-#{$prop-max}: #{$bp-max - 0.01}px) {
    @content;
  }
}
  
  @mixin lineHeight($font, $line) {
    line-height: calc($line/$font);
  }
  @function line-height($font, $line) {
    $val : calc($line/$font);
    @return #{$val}em;
  }
  
  @mixin boxShadow{
    -webkit-box-shadow: 0px -3px 19px rgba(112,123,155,0.15);
    -moz-box-shadow: 0px 3px 19px rgba(112,123,155,0.15);
    box-shadow: 0px 3px 19px rgba(112,123,155,0.15);
  }
  @mixin lineClamp($lines) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  @mixin placeholder($color) {
    ::placeholder{
      color: $color;
      opacity: 1;
  }
  :-ms-input-placeholder{
    color: $color;
  }
  ::-ms-input-placeholder{
    color: $color;
  }
  }
  
  @mixin aspectRatio($w, $h) {
    padding-bottom: calc(($h / $w) * 100%);
    position: relative;
  
    &>img,
    &>picture {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: 0.3s all ease-in-out;
      img {
        width: 100%;
        height: 100%;
        transition: 0.3s all ease-in-out;
      }
    }
  }


//hover  
@mixin hover($value, $val...){
  $var : null;
  $tran : null;
  @each $prop , $inp in $value{
    @if $inp != null {
      #{$prop} : nth($inp,1)
    }
  }
  @each $prop , $inp in $value{
    $var : append($var,$prop,comma);
    $tran : append($tran, $prop 0.3s ease-in-out,comma);
  }
  @media (hover: hover) {
    transition: $tran;
    will-change: $var;
    &:active,
    &:hover{
      @each $prop , $inp in $value{
        #{$prop} : nth($inp,2)
      }
    }
  }
}

@mixin hoverStyle{
  &:hover{
    @media(hover: hover){
      @content;
    }
  }
  
}

@mixin removeFocus($value){
  @each $prop , $inp in $value{
    &:focus:not(:hover):not(:active){
      #{$prop} : #{$inp} !important
    }
  }
}

@mixin outlineNone(){
  &,
  &:is(:focus,:hover,:active,:focus-within,:focus-visible){
    outline: none;
  }
  &:is(button){
    box-shadow: none!important;
  }
}
 %overflowHidden{
  -webkit-backface-visibility: hidden;
    -moz-backface-visibility: hidden;
    -webkit-transform: translate3d(0,0,0);
    -moz-transform: translate3d(0,0,0);
    overflow: hidden;
}
@mixin overflowHidden(){
  @extend %overflowHidden;
}

@mixin lineClipp($val : 1){
  @if $val == 1{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
  }
  @else{
    @include lineClamp($val)
  }
}
